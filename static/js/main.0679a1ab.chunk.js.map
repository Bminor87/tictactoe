{"version":3,"sources":["components/square/square.component.jsx","helpers/settings.jsx","components/board/board.component.jsx","helpers/calculations.jsx","components/game/game.component.jsx","index.js"],"names":["Square","className","this","props","onClick","value","React","Component","max_squares","Board","renderBoard","board","x","Math","sqrt","children","y","push","renderSquare","i","winners","includes","squares","calculateWinner","row","winner","col","diag","getCoordinates","square","Row","ceil","remainder","floor","round","Game","handleClick","history","state","slice","stepNumber","length","xIsNext","setState","concat","lastMove","sign","to","jumpTo","step","Array","fill","status","current","moves","map","move","desc","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0679a1ab.chunk.js","sourcesContent":["import React from 'react';\nimport './square.styles.css';\n\nclass Square extends React.Component {\n    render() {\n      return (\n        <button\n            className={this.props.className}\n            onClick={this.props.onClick}\n        >\n          {this.props.value}\n        </button>\n      );\n    }\n}\n\nexport default Square;","export const max_squares = 25*25;","import React from 'react';\nimport Square from '../square/square.component';\nimport './board.styles.css'\nimport { max_squares } from '../../helpers/settings';\n\nclass Board extends React.Component {\n\n    renderSquare(i) {\n      return (\n        <Square\n          key={i}\n          className={this.props.winners.includes(i) ? 'square square-winner': 'square'}\n          value={this.props.squares[i]}\n          onClick={() => {this.props.onClick(i)}}\n        />\n      );\n    }\n\n    renderBoard = () => {\n\n      let board = [];\n\n      for (let x = 0; x < Math.sqrt(max_squares); x++) {\n\n        let children = [];\n\n        for (let y = 1; y <= Math.sqrt(max_squares); y++) {\n\n          children.push(this.renderSquare(x*Math.sqrt(max_squares) + y));\n\n        }\n\n        board.push(<div key={x} className=\"board-row\">{children}</div>)\n\n      }\n\n      return board;\n    }\n  \n    render() {\n\n\n\n      return (\n        <div>\n          {this.renderBoard()}\n        </div>\n      );\n    }\n  }\n\n  export default Board;","import { max_squares } from './settings';\n\nexport const calculateSmallWinner = (squares) => {\n    const lines = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9],\n        [1, 5, 9],\n        [3, 5, 7]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nexport const calculateWinner = (squares) => {\n    let sqrt = Math.sqrt(max_squares);\n\n    for (let i = 1; i <= max_squares; i++) {\n        let row = [i,i+1,i+2,i+3,i+4];\n        if (squares[i] \n            && squares[i] === squares[row[1]]\n            && squares[i] === squares[row[2]] \n            && squares[i] === squares[row[3]]\n            && squares[i] === squares[row[4]])\n        {\n            return {winner: squares[i], squares: row};\n        }\n    }\n    for (let i = 1; i <= max_squares; i++) {\n        let col = [i,i+sqrt,i+sqrt*2,i+sqrt*3,i+sqrt*4];\n        if (squares[i] \n            && squares[i] === squares[col[1]]\n            && squares[i] === squares[col[2]] \n            && squares[i] === squares[col[3]]\n            && squares[i] === squares[col[4]])\n        {\n            return {winner: squares[i], squares: col};\n        }\n    }\n    for (let i = 1; i <= max_squares; i++) {\n        let diag = [i,i+sqrt+1,i+sqrt*2+2,i+sqrt*3+3,i+sqrt*4+4];\n        if (squares[i] \n            && squares[i] === squares[diag[1]]\n            && squares[i] === squares[diag[2]] \n            && squares[i] === squares[diag[3]]\n            && squares[i] === squares[diag[4]])\n        {\n            return {winner: squares[i], squares: diag};\n        }\n    }\n    for (let i = 1; i <= max_squares; i++) {\n        let diag = [i,i+sqrt-1,i+sqrt*2-2,i+sqrt*3-3,i+sqrt*4-4];\n        if (squares[i] \n            && squares[i] === squares[diag[1]]\n            && squares[i] === squares[diag[2]] \n            && squares[i] === squares[diag[3]]\n            && squares[i] === squares[diag[4]])\n        {\n            return {winner: squares[i], squares: diag};\n        }\n    }\n    return {winner: null, squares: []};\n\n}\n\nexport const generateSquares = () => {\n\n    let max_elements = 100;\n    let sqrt = Math.sqrt(max_elements);\n\n    let getNumber = (x,y) => {\n        return Math.round((x-1)*sqrt+y); // Math.round allows for uneven max_elements\n    }\n\n    let all_pass = true;\n\n    for (let i = 1; i <= max_elements; i++) {\n\n        let should_be = i;\n    \n        console.log(i+' is in ');\n        \n        let Row = Math.ceil(i/sqrt);\n\n        let remainder = i/sqrt - (Math.floor(i/sqrt));\n        let Col = remainder ? Math.round(remainder * sqrt) : sqrt;\n\n        console.log('Row: '+Row+' and Col: '+Col);\n    \n        let really_is = getNumber(Row, Col);\n\n        console.log('In that row should be: '+really_is);\n    \n        if (should_be === really_is) {\n            console.log('Correct')\n        } else {\n            console.log('Incorrect')\n            all_pass = false;\n        }\n\n    }\n\n    if (all_pass) console.log('ALL TESTS PASSED!');\n\n}\n\nexport const getCoordinates = (square) => {\n\n    let sqrt = Math.sqrt(max_squares);\n\n    let Row = Math.ceil(square/sqrt);\n\n    let remainder = square/sqrt - (Math.floor(square/sqrt));\n    let Col = remainder ? Math.round(remainder * sqrt) : sqrt;\n\n    return Row + 'x' + Col;\n}","import React from 'react';\nimport Board from '../board/board.component';\nimport './game.styles.css';\nimport { calculateWinner, getCoordinates } from '../../helpers/calculations';\nimport { max_squares } from '../../helpers/settings';\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(max_squares).fill(null),\n                lastMove: {\n                    sign: null,\n                    to: null\n                }\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        }\n    }\n\n    handleClick = (i) => {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares).winner || squares[i]) {\n          return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n           history: history.concat([{\n               squares: squares,\n               lastMove: {\n                   sign: this.state.xIsNext ? 'X' : 'O',\n                   to: getCoordinates(i)\n               }\n           }]),\n           stepNumber: history.length,\n           xIsNext: !this.state.xIsNext\n        });\n    }\n\n    jumpTo = (step) => {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    render() {\n\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Mene siirtoon #' + move :\n                'Mene pelin alkuun';\n            return (\n                <li key={move}>\n                    <button \n                        className={ this.state.stepNumber === move ? 'selected-step' : '' } \n                        onClick={() => this.jumpTo(move)}\n                    >\n                        {desc}\n                    </button>\n                    { step.lastMove.sign ? ' ' + step.lastMove.sign + ' ruutuun ' + step.lastMove.to : '' }\n                </li>\n            );\n        });\n\n        let status;\n        if (winner.winner) {\n            status = 'Voittaja: ' + winner.winner;\n        } else {\n            status = 'Seuraava pelaaja: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board\n                    winners={winner.squares}\n                    squares={current.squares}\n                    onClick={(i) => {this.handleClick(i)}}\n                />\n            </div>\n            <div className=\"game-info\">\n                <div>{ status }</div>\n                <ol>{ moves }</ol>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game/game.component'\nimport './index.css';\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}